@using Routeorama.Data
@using Routeorama.Authentication
@inject IJSRuntime _runtime;
@inject IPlaceService PlaceService;
@inject AuthenticationStateProvider StateProvider;
@inject NavigationManager NavigationManager;

@page "/createPlace"
<Nav/>
<div class="content">
    <div id="map"></div>
    <Feed/>
</div>
<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="exit" @onclick="ClearData">&times;</span>
        <div class="modal-inner-content">
            <p style="justify-content: center;display: flex;">Is this information correct?</p>
            <div class="create-place-input">
                <input class="inner-field" placeholder="Name of the place" @bind-value="@Name"><br>
            </div>
            <div class="create-place-input">
                <input style="resize: none" placeholder="Description" class="inner-field" @bind-value="@Description"/>
            </div>
            <div class="create-place-input">
                <input disabled class="inner-field" placeholder="Coordinates" id="coords" @bind-value="@Coordinates">
            </div>
            <div class="create-place-input">
                <input disabled class="inner-field" placeholder="Country" id="country" @bind-value="@Country">
            </div>
            <div class="create-place-input">
                <input class="inner-field" id="city" placeholder="City" @bind-value="@City">
            </div>
            <label>@label</label>
        </div>
        <button class="create-place" id="create-place-button" @onclick="CreateThePlace">Create place</button>
    </div>
</div>

@code {

    private string Name;
    private string Description;
    private string Coordinates;
    private string Lat;
    private string Lng;
    private string Country;
    private string City;
    private string label;
    private double NELat, NELng, SWLat, SWLng;

    [JSInvokable("invokeFromJS")] public Task ChangeValue(double NELat, double NELng, double SWLat, double SWLng)
    {
        this.NELat = NELat;
        this.NELng = NELng;
        this.SWLat = SWLat;
        this.SWLng = SWLng;

        StateHasChanged();

        makeMarkers();

        return Task.CompletedTask;
    }

    [JSInvokable("channel")] public Task GoToPlace(string name)
    {
        NavigationManager.NavigateTo($"/channel/{name}");
        return Task.CompletedTask;
    }

    private async void makeMarkers()
    {
        List<double> bounds = new List<double>();
        bounds.Add(SWLng);
        bounds.Add(SWLat);
        bounds.Add(NELng);
        bounds.Add(NELat);

        List<Place> places = await PlaceService.GetPlacesInBounds(bounds);

        await _runtime.InvokeVoidAsync("clearMarkers");

        foreach (Place place in places)
        {
            await _runtime.InvokeVoidAsync("MakeMarker", place.id, place.name, place.description, place.userId, place.followCount,
                place.location.city, place.location.country, place.location.lat, place.location.lng);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _runtime.InvokeVoidAsync("initMap");
        await _runtime.InvokeVoidAsync("setWrapper", DotNetObjectReference.Create(this));
    }

    private async Task CreateThePlace()
    {
        if (string.IsNullOrEmpty(Description) && string.IsNullOrEmpty(Name))
            label = ("Fill out the name and description of the place.");

        else if (string.IsNullOrEmpty(Name))
            label = ("Fill out the name of the place.");

        else if (string.IsNullOrEmpty(Description))
            label = ("Fill out the description of the place.");

        else
        {
            if (string.IsNullOrEmpty(City))
            {
                City = await _runtime.InvokeAsync<string>("FetchCity");
            }
            if (string.IsNullOrEmpty(Country))
            {
                Country = await _runtime.InvokeAsync<string>("FetchCountry");
            }

            Coordinates = await _runtime.InvokeAsync<string>("FetchCoordinates");

            var coordinates = Coordinates.Split(", ");
            Lat = coordinates[0].TrimStart('(');
            Lng = coordinates[1].TrimEnd(')');

            Location location = new Location
            {
                city = City, country = Country, lat = Double.Parse(Lat), lng = Double.Parse(Lng)
            };

            int Id = ((CustomAuthenticationStateProvider) StateProvider).GetUserId();
            Place place = new Place()
            {
                userId = Id,
                description = Description,
                id = 0,
                location = location,
                name = Name,
                followCount = 0
            };

            try
            {
                await PlaceService.CreateNewPlace(place);
                PlaceService.SetPlaceName(Name);
                await ClearData();
                NavigationManager.NavigateTo("/channel");
            }
            catch (Exception e)
            {
                label = "Creating the place failed, try again.";
            }
        }
    }

    private async Task ClearData()
    {
        Name = "";
        Description = "";
        Coordinates = "";
        Country = "";
        City = "";
    }
}