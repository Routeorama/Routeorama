@inject IPlaceService _placeService;
@inject NavigationManager _navigationManager;
@inject IPostService _postService;
@inject AuthenticationStateProvider _provider;

@page "/NewsFeed"
@using Routeorama.Models.Post
@using Routeorama.Data
@using Routeorama.Authentication


<AuthorizeView>
    <NotAuthorized>
        <Login/>
    </NotAuthorized>
    <Authorized>
        <Nav/>
        <div class="main-feed">
            @if (_filteredPosts == null || _filteredPosts is {Count: 0})
            {
                <img src="icons/ezgif.com-gif-maker.gif"/>
            }
            else {
            <div class="main-feed-left">

            </div>
            <div class="main-feed-center">
                @if (_filteredPosts != null)
                {
                    @foreach (var post in _filteredPosts)
                    {
                        <PostComponent Post="@post"/>
                    }
                }
                <div style="display: flex;justify-content: center;align-items: center;margin-bottom: 15px">
                    <div style="background-color: #E57261;cursor:pointer; padding: 10px;border: 0px solid;" @onclick="FetchMorePosts">
                        Load more posts
                    </div>
                </div>
            </div>
                <div class="main-feed-right">
                    @if (_mostFollowedPlaces.Count > 0 && _mostLikedPlaces.Count > 0)
                    {
                        <div class="suggestions" style="position: fixed; top: auto;">
                            <div class="most-followed-places" style="margin-bottom: 20px">
                                <div class="most-followed-title">Most followed places</div>
                                @for (var x = 0; x < _mostFollowedPlaces.Count; x++)
                                {
                                    @if (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10)
                                    {
                                        <div class="in-one-line">
                                            <div class="most-followed-inner">


                                                @if (x == 0)
                                                {
                                                    <div>1.</div>
                                                }
                                                @if (x == 2)
                                                {
                                                    <div>2.</div>
                                                }
                                                @if (x == 4)
                                                {
                                                    <div>3.</div>
                                                }
                                                @if (x == 6)
                                                {
                                                    <div>4.</div>
                                                }
                                                @if (x == 8)
                                                {
                                                    <div>5.</div>
                                                }
                                                @{ var tempint = @x; }
                                                <div class="most-followed-name" @onclick="() => GoToPlace(_mostFollowedPlaces[tempint])">@_mostFollowedPlaces[x]</div>
                                            </div>
                                            <div class="most-followed-count">
                                                @_mostFollowedPlaces[x + 1]
                                                <img alt="follow count" src="icons/follow.svg">
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="most-followed-places">
                                <div class="most-followed-title">Most liked places</div>
                                @for (var x = 0; x < _mostLikedPlaces.Count; x++)
                                {
                                    @if (x == 0 || x == 2 || x == 4 || x == 6 || x == 8 || x == 10)
                                    {
                                        <div class="in-one-line">
                                            <div class="most-followed-inner">

                                                @if (x == 0)
                                                {
                                                    <div>1.</div>
                                                }
                                                @if (x == 2)
                                                {
                                                    <div>2.</div>
                                                }
                                                @if (x == 4)
                                                {
                                                    <div>3.</div>
                                                }
                                                @if (x == 6)
                                                {
                                                    <div>4.</div>
                                                }
                                                @if (x == 8)
                                                {
                                                    <div>5.</div>
                                                }
                                                @{ var tempint = @x; }
                                                <div class="most-followed-name" @onclick="() => GoToPlace(_mostLikedPlaces[tempint])">@_mostLikedPlaces[x]</div>
                                            </div>
                                            <div class="most-followed-count">
                                                @_mostLikedPlaces[x + 1]
                                                <img alt="like count" src="icons/liked.svg">
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private IList<Post> _fetchedPosts = new List<Post>();
    private IList<Post> _filteredPosts;
    private IList<string> _mostFollowedPlaces = new List<string>();
    private IList<string> _mostLikedPlaces = new List<string>();

    private int _userId;
    private string _errorLabel = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _filteredPosts = new List<Post>();
            _userId = ((CustomAuthenticationStateProvider) _provider).GetUserId();

            var container = await _postService.GetPostsForNewsFeed(_userId);
            _mostFollowedPlaces = await _placeService.GetMostFollowedPlaces();
            _mostLikedPlaces = await _placeService.GetMostLikedPlaces();

            if (container != null)
            {
                _fetchedPosts = container.posts;
                Filter();
            }
            StateHasChanged();
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void Filter()
    {
        _filteredPosts = _fetchedPosts;
    }

    private async Task FetchMorePosts()
    {
        PostContainer container = null;
        if (_filteredPosts == null)
        {
            container = await _postService.LoadMorePostsForNewsFeed(_userId, 0);
        }
        else
        {
            container = await _postService.LoadMorePostsForNewsFeed(_userId, _filteredPosts.Last().postId);
        }
        if (container.posts != null)
        {
            foreach (var post in container.posts)
            {
                _filteredPosts?.Add(post);
            }
        }
    }

    private void GoToPlace(string placeUrl)
    {
        _navigationManager.NavigateTo($"/channel/{placeUrl}");
    }
}