@inject IPlaceService PlaceService;
@inject IJSRuntime _runtime;
@inject NavigationManager NavigationManager;
@inject IPostService PostService;
@inject AuthenticationStateProvider _provider;

@page "/channel/{placeName}"
@using Routeorama.Data
@using Routeorama.Models.Post
@using System.IO
@using Routeorama.Authentication
<Nav/>
<div class="everything-place">
    <div class="place">
        <h1>
            @place.name
        </h1>
        <h1>
            @place.description
        </h1>
    </div>
    <div class="weather-description" id="description"/>
    <div class="degrees" id="temp"/>
    <div class="feels-like_degrees" id="feels_like"/>
    <div class="pressure" id="pressure"/>
    <div class="location" id="location"/>
    <div class="sunrise" id="sunrise"/>
    <div class="sunset" id="sunset"/>
    <div class="buttonCreatePlace">
        <button @onclick="Open">Create a post</button>
    </div>
</div>
<div class="feed">
    <div class="post">
        <div class="post-title">A very cool title - <span>created at 08/06/2021</span></div>
        <div class="post-content">
            A very cool description that is very long and benfnaeifniaenfinaeifn
            afegewgeguewbgiubequiogbqiebgiqbegibeqoigboepqbgpuiobqpugbpqeugb
            eiougbeowibgoiwubgouiwbegouibwoiebgowbegibqwenbrwqnrinwqiornqwoinrwqir
            ibndfgubegipuwbgpiubwepgubiwe
        </div>
        <div class="post-img">
            <img src="https://i.pinimg.com/originals/53/aa/f6/53aaf6011bba6d6bb0499e1eef12c26d.jpg" width="400" height="500" alt="post photo">
        </div>
        <div class="post-likes">
            <div class="like-button">Like</div> - <span>69</span>
        </div>
        
    </div>
    @foreach (var post in posts)
    {
        <div class="post">
            <div class="post-title">@post.title - <span>created at @post.dateOfCreation</span></div>
            <div class="post-content">@post.content</div>
            <div class="post-img">
                <img src="@post.photo" alt="post photo">
            </div>
            <div class="post-likes">@post.likeCount</div>
        </div>
    }
</div>
<div class="@cssClass">
    <div class="overlay-content">
        <div class="overlay-title">Create post</div>
        <div class="overlay-content-inner">
            <label for="title">Title</label>
            <input type="text" id="title" @bind-value="title">
            <label for="content">Content</label>
            <input type="text" id="content" @bind-value="description">
            <InputFile OnChange="@LoadFiles"/>
        </div>
        <div class="overlay-create">
            <button @onclick="createNewPostAsync">Create post</button>
        </div>

    </div>
</div>


@code {
    private Place place = new Place();
    private IList<Post> posts = new List<Post>();

    [Parameter]
    public string placeName { get; set; }

    private Dictionary<IBrowserFile, string> loadedFiles =
        new Dictionary<IBrowserFile, string>();

    private long maxFileSize = 15000000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private string cssClass = "overlay .";
    private bool isOpen = false;

    private void Open()
    {
        if (isOpen) return;
        cssClass = cssClass.Replace(".", "open");
        isOpen = true;
    }

    private void Close()
    {
        cssClass = cssClass.Replace("open", ".");
        isOpen = false;
    }

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        try
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                using var reader = new StreamReader(file.OpenReadStream(maxFileSize));
                loadedFiles.Add(file, await reader.ReadToEndAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            place = await PlaceService.FetchPlaceData(placeName);
            await _runtime.InvokeVoidAsync("fetchWeather", place.location.lat, place.location.lng);
            posts = await PostService.FetchPosts(place.id);
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        } 
    }

    private string? title;
    private string? description;
    private string? photo;
    private string? error; 
 
    private async void createNewPostAsync()
    {
        var img = "";
        foreach (var (file, actualImg) in loadedFiles)
        {
            img = actualImg;
        }
        Post post = new Post
        {
            userId= ((CustomAuthenticationStateProvider) _provider).GetUserId() , postId = 0, title = title, content = description, photo = "img", likeCount = 0, dateOfCreation = null, placeId = place.id
        };

        Console.WriteLine(post);

        try
        {
            var randomPost = await PostService.CreateNewPost(post);  
            posts.Add(randomPost);
            Close();
            Console.WriteLine("this is happening");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}