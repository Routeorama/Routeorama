@inject IPlaceService _placeService;
@inject IJSRuntime _runtime;
@inject NavigationManager _navigationManager;
@inject IPostService _postService;
@inject AuthenticationStateProvider _provider;
@inject IWebHostEnvironment Environment

@page "/channel/{placeName}"
@using Routeorama.Data
@using Routeorama.Models.Post
@using System.Linq
@using Microsoft.AspNetCore.Hosting
@using Routeorama.Authentication

<Nav/>
<div class="everything-place">
    <div class="place">
        <h1>
            @_place.name
        </h1>
        <h1>
            @_place.description
        </h1>
    </div>
    <div class="errorLabel">@errorLabel</div>
    <div class="location" id="location"></div>
    <div class="weather-description" id="description"></div>
    <div class="degrees" id="temp"></div>
    <div class="feels-like_degrees" id="feels_like"></div>
    <div class="pressure" id="pressure"></div>
    <div class="sunrise" id="sunrise"></div>
    <div class="sunset" id="sunset"></div>

    @if (_authState != 0){
        <div class="buttonCreatePlace">
            <button @onclick="@(() => ShowCreatePlace(_place.name, _place.id))" class="btn btn-primary">Create post</button>
        </div>
    }
    else{
        <div>
            Login to post
        </div>
    }

</div>
<div class="feed">
    @if (_filteredPosts != null)
    {
        @foreach (var post in _filteredPosts)
        {
            <PostComponent Post="@post"/>
        }
    }
</div>
<div style="display: flex;justify-content: center;align-items: center;margin-bottom: 15px">
    <div style="background-color: gray; color: white; cursor:pointer; padding: 15px" @onclick="FetchMorePosts">
        Load more posts
    </div>
</div>


@code {
    private Place _place = new();
    private IList<Post> _posts = new List<Post>();
    private IList<Post>? _filteredPosts = new List<Post>();

    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public string PlaceName { get; set; }
    private int _authState;
    private string errorLabel = "";



    protected override async Task OnInitializedAsync(){
        try
        {
            _authState = ((CustomAuthenticationStateProvider) _provider).GetUserId();
            _place = await _placeService.FetchPlaceData(PlaceName);
            Console.WriteLine(PlaceName);
            try
            {
                await _runtime.InvokeVoidAsync("fetchWeather", _place.location.lat, _place.location.lng);
            }
            catch (NullReferenceException e)
            {
                errorLabel = "Could not fetch the weather.";
            }
           
            var container = await _postService.FetchPosts(_place.id, 0);
            if (container != null)
            {
                _posts = container.posts;
                Filter();
            }
            
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void Filter()
    {
        _filteredPosts = _posts;
    }

    private async Task FetchMorePosts()
    {
        PostContainer container = null;
        if (_filteredPosts == null)
        {
            container = await _postService.FetchPosts(_place.id, 0);
        }
        else
        {
            container = await _postService.FetchPosts(_place.id, _filteredPosts.Last().postId);
        }
        if (container.posts == null)
        {
        }
        else
        {
            foreach (var post in container.posts)
            {
                _filteredPosts.Add(post);
            }
        }
    }
    
    void ShowCreatePlace(string placeName, int placeId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(PostPopUp.placeName), placeName);
        parameters.Add(nameof(PostPopUp.placeId), placeId);

        var options = new ModalOptions() 
        { 
            Animation = ModalAnimation.FadeInOut(0.2),
            DisableBackgroundCancel = true
        };

        Modal.Show<PostPopUp>("Create Place", parameters, options);
    }

}