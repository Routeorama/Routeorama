@page "/profile"
@using Routeorama.Authentication
@using System.Globalization
@using System.IO
@using System.Threading
@inject AuthenticationStateProvider _provider;
@inject NavigationManager _navigationManager;

<AuthorizeView>
    <NotAuthorized>
        <Login/>
    </NotAuthorized>
    <Authorized>
        <Nav/>
        <div class="profile">
            <div class="profile-card">
                <div class="profile-card-up">
                    @if (_currentUser.photo.Length > 0)
                    {
                        <div class="profile-image" style="background-image: url(@("data:" + _currentUser.photoType + ";base64," + Convert.ToBase64String(_currentUser.photo))) ">
                            <label for="profile-update">
                                <div class="profile-image-inner">
                                    <img alt="" src="icons/image.svg">
                                </div>
                            </label>
                            <InputFile id="profile-update" OnChange="@OnFileSelection"></InputFile>
                        </div>
                    }
                    else
                    {
                        <div class="profile-image" style="background-image: url('icons/profile.svg'); background-position: right; background-size: 110px, 110px; background-repeat: no-repeat">
                            <label for="profile-update">
                                <div class="profile-image-inner">
                                    <img alt="" src="icons/image.svg">
                                </div>
                            </label>
                            <InputFile id="profile-update" OnChange="@OnFileSelection"></InputFile>
                        </div>
                    }
                    <div class="profile-owner">
                        @_currentUser.displayName
                    </div>
                    <div class="profile-data">
                        <div class="profile-data-group">
                            <img alt="" src="icons/user.svg">
                            @_currentUser.username
                        </div>
                        <div class="profile-data-group">
                            <img alt="" src="icons/envelope.svg">
                            @_currentUser.email
                        </div>
                        <div class="profile-data-group">
                            <img alt="" src="icons/birthday-cake.svg">
                            @_currentUser.dob
                        </div>
                    </div>
                </div>
                <div class="profile-card-down">
                    <div class="profile-edit-button" @onclick="ShowEditProfile">
                        Edit
                        <img alt="" src="icons/edit.svg">
                    </div>
                </div>
            </div>
        </div>
        
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    [Parameter]
    public User _currentUser { get; set; }
    private string _username;
    private string _password;
    private string _email;
    private string _displayName;
    private string _dateOfBirth;
    private DateTime? _value = DateTime.Now;

    private byte[] _byteArray = {};

    private string _imageType = "";
    private string errorLabel = "";
    private int userid;
    private string url = "";


    protected override async void OnInitialized()
    {
        _currentUser = await ((CustomAuthenticationStateProvider) _provider).GetUser();
        if (_currentUser.photo == null)
        {
            
            url = null;
        }
        else
        {
            url = "data:" + _currentUser.photoType + ";base64," + Convert.ToBase64String(_currentUser.photo);
        }
        StateHasChanged();
    }

    private void OnChange(DateTime? args, string datepicker, string yyyyMMdd)
    {
        if (_value != null) _dateOfBirth = _value.Value.ToString("yyyy-MM-dd", DateTimeFormatInfo.InvariantInfo);
    }

    private async void OnFileSelection(InputFileChangeEventArgs e)
    {
        var imgFile = e.File;
        _imageType = imgFile.ContentType;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream(512000000, new CancellationToken(default)).ReadAsync(buffers);
        _byteArray = buffers;

        var user = new User
        {
            userId = _currentUser.userId,
            username = _currentUser.username,
            password = _currentUser.password,
            dob = _currentUser.dob,
            email = _currentUser.email,
            role = RoleEnum.user,
            displayName = _currentUser.displayName,
            photo = _byteArray,
            photoType = _imageType
        };
        var response = await ((CustomAuthenticationStateProvider) _provider).UpdateUser(user);
        errorLabel = response;
        Console.WriteLine(response);
        if (response.Equals("Update of the profile successful"))
            _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
    }
    
    void ShowEditProfile()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditProfile._currentUser), _currentUser);
        
        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(0.2),
            DisableBackgroundCancel = true,
            OverlayCustomClass = "EditProfile.razor.css"
        };

        Modal.Show<EditProfile>("Edit profile", parameters, options);
    }

}