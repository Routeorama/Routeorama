@page "/register"
@using Routeorama.Authentication
@using System.Globalization
@using System.Threading
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<div class="page" style="height: 100vh; width: 100vw; margin: 0; padding: 0;">
    <div class="register-container">
        <div class="register-inner">
            <div class="register-title">Register</div>
            <div class="register-group">
                <img alt="username" src="icons/user.svg">
                <input class="register-input" type="text" placeholder="Username" @bind-value="_username"/>
            </div>
            <div class="register-group">
                <img alt="email" src="icons/envelope.svg">
                <input class="register-input" type="text" placeholder="Email" @bind-value="_email"/>
            </div>
            <div class="register-group">
                <img alt="password" src="icons/padlock.svg">
                <input class="register-input" type="password" placeholder="Password" @bind-value="_password"/>
            </div>
            <div class="register-group">
                <img alt="repeat password" src="icons/padlock.svg">
                <input class="register-input" type="password" placeholder="Repeat Password" @bind-value="_repeatPassword"/>
            </div>
            <div class="register-group">
                <img alt="display name" src="icons/name.svg">
                <input class="register-input" type="text" placeholder="Display name" @bind-value="_displayName"/>
            </div>
            <div class="register-group">
                <label for="file-upload" class="register-input-label">
                    <img alt="profile picture" src="icons/image.svg"> <span>Choose picture</span>
                </label>
                <InputFile id="file-upload" OnChange="@OnFileSelection"></InputFile>
            </div>
            <div class="register-group">
                <img alt="birthday" src="icons/birthday-cake.svg">
                <div class="register-input">
                    <RadzenDatePicker @bind-Value=@_value DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy"))></RadzenDatePicker>
                </div>
            </div>

            <div class="errorLabel">@_errorMessage</div>

            <div class="register-actions">
                <button class="register-button" @onclick="PerformRegister">
                    Register
                </button>
                <button class="register-button" @onclick="Back">
                    Go back
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    private string _username = "";
    private string _password = "";
    private string _repeatPassword = "";
    private string _displayName = "";
    private string _dateOfBirth = "";
    private string _email = "";
    private string _errorMessage = "";
    private DateTime? _value = DateTime.Now;

    private byte[] _byteArray =
    {};

    private string _imageType = "";

    private async Task PerformRegister()
    {
        _errorMessage = "";
        try
        {
            var registerUser = new User
            {
                displayName = _displayName,
                dob = _dateOfBirth,
                password = _password,
                username = _username,
                email = _email,
                role = RoleEnum.user,
                photo = _byteArray,
                photoType = _imageType
            };

            if (!_password.Equals(_repeatPassword))
                throw new Exception("Passwords do not match.");

            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).Register(registerUser);

            _username = "";
            _password = "";
            _displayName = "";
            _dateOfBirth = "";
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void OnChange(DateTime? args, string datepicker, string mmDdYyyy)
    {
        if (_value != null) _dateOfBirth = _value.Value.ToString("yyyy-MM-dd", DateTimeFormatInfo.InvariantInfo);
    }

    private void Back()
    {
        _navigationManager.NavigateTo("/");
    }

    private async void OnFileSelection(InputFileChangeEventArgs e)
    {
        var imgFile = e.File;
        _imageType = imgFile.ContentType;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream(512000000, new CancellationToken(default)).ReadAsync(buffers);
        _byteArray = buffers;
    }


}