@namespace LoginComponent
@using Routeorama.Authentication

@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<div class="login-container">
    <div class="login-inner">
        <div class="login-title">Login</div>
        <div class="login-input"> 
            <div class="login-svg-container">
                <img alt="username field" src="icons/user.svg">
            </div>
            <input type="text" placeholder="Username" @bind-value="_username"/>
        </div>
        <div class="login-input">
            <div class="login-svg-container">
                <img alt="username field" src="icons/padlock.svg">
            </div>
            <input type="password" placeholder="Password" @bind-value="_password"/>
        </div>
        <div class="errorLabel">@_errorMessage</div>
        <div class="login-action">
            <button class="login-button" @onclick="PerformLogin">Login</button>
            <button class="login-button" @onclick="PerformRegister">Register</button>
        </div>
    </div>
</div>

@code {
    private string _username;
    private string _password;
    private string _errorMessage;

    private async Task PerformLogin()
    {
        _errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).ValidateLogin(_username, _password);
            _navigationManager.NavigateTo("/NewsFeed");
            _username = "";
            _password = "";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private void PerformRegister()
    {
        _navigationManager.NavigateTo("/register");
    }

}