@using Routeorama.Data
@using Routeorama.Authentication
@using System.Threading
@using Routeorama.Models.Post
@inject NavigationManager _navigationManager;
@inject AuthenticationStateProvider _provider;
@inject IPostService _postService;

<div class="createplace-container">
    <label class="titlelabel">Title</label>
    <div class="title-placeholder">
        <input type="text" placeholder="title" @bind-value="_post.title"/>
    </div>
    <label class="contentlabel">Content</label>
    <div class="content-placeholder">
        <input type="text" placeholder="content" @bind-value="_post.content"/>
    </div>
    <label class="imagelabel">Image</label>
    <div class="image-placeholder">
        <InputFile OnChange="@OnFileSelection"></InputFile>
    </div>
    <div class="errorLabel">@_errorMessage</div>
    <div class="button-placeholder">
        <RadzenButton style="margin: 0 1rem 1rem 0" Click=@(CreateNewPost) Text="Create new post" ButtonStyle="ButtonStyle.Primary"/>
    </div>
</div>

@code {
    private Post _post = new();

    private string _errorMessage;
    private byte[] _byteArray = new byte[] {};

    [Parameter]
    public int PlaceId { get; set; }

    [Parameter]
    public string PlaceName { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private string _imageType;

    private Post _post1 = null;

    private async Task CreateNewPost()
    {
        if (string.IsNullOrEmpty(_post.content) && string.IsNullOrEmpty(_post.title))
            _errorMessage = ("Fill out the title and content of the post.");

        else if (string.IsNullOrEmpty(_post.title))
            _errorMessage = ("Fill out the title of the post.");

        else if (string.IsNullOrEmpty(_post.content))
            _errorMessage = ("Fill out the content of the post.");

        else if (_post.content.Length > 300)
            _errorMessage = ("The content of the post should not exceed 300 characters");

        else if (_post.title.Length > 300)
            _errorMessage = ("The title of the post should not exceed 30 characters");

        else
        {
            var postToSend = new Post
            {
                userId = ((CustomAuthenticationStateProvider) _provider).GetUserId(),
                postId = 0,
                title = _post.title,
                content = _post.content,
                photoType = _imageType,
                photo = _byteArray,
                likeCount = 0,
                dateOfCreation = null,
                placeId = PlaceId
            };

            try
            {
                _post1 = await _postService.CreateNewPost(postToSend);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                _errorMessage = "Creating a post failed.";
            }
            if(_post1 != null)
                _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad:true);
        }
    }

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        var imgFile = e.File;
        _imageType = imgFile.ContentType;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream(512000000, new CancellationToken(default)).ReadAsync(buffers);
        _byteArray = buffers;
    }

}