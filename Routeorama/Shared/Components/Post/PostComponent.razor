@using Routeorama.Models.Post
@using Routeorama.Data
@using Routeorama.Authentication
@inject IPostService _postService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<div class="post">
    <div class="post-upper">
        <div class="post-upper-profile">
            <div class="post-profile">
                <div class="post-owner">@Post.userId</div>
                <div class="post-date">@Post.dateOfCreation</div>
            </div>
            <div class="post-options">
                @if (Post.userId.Equals(((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetUserId()))
                {
                    
                <RadzenSplitButton Click=@(args => OnClick(args)) Icon="account_circle">
                    <ChildContent>
                        <RadzenSplitButtonItem Text="Delete Post" Value="1" Icon="delete_outline"/>
                    </ChildContent>
                </RadzenSplitButton>
                }
                else if (!Post.userId.Equals(((CustomAuthenticationStateProvider) AuthenticationStateProvider).GetUserId()))
                {
                    <RadzenSplitButton Disabled="true" Click=@(args => OnClick(args)) Icon="account_circle">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Delete Post" Value="1" Icon="delete_outline"/>
                        </ChildContent>
                    </RadzenSplitButton>

                }
            </div>
        </div>
        <div class="post-description">
            Title; @Post.title
            <br>
            Content; @Post.content
        </div>
    </div>
    <div class="post-middle">
        @if (@Post.photo != null)
        {
            <div class="row">
                <img class="post-image" style="" src=@("data:png;base64," + Convert.ToBase64String(@Post.photo))>
            </div>
            <!--<img alt="asdff" class="post-image" src=@("data:image/png;charset=utf-8;base64 " + @Post.photo)>-->
        }
    </div>
    <div class="post-bottom">
        <div class="post-likes">
            <div class="post-likes-inner">
                <span>@Post.likeCount</span> Likes
            </div>
            <div class="post-likes-inner">
                <span>12</span> Comments
            </div>
        </div>
        <div class="post-interactions">
            <div class="post-like-button">
                <img src="icons/like.svg" width="18" height="18">
                <span>Like</span>
            </div>
            <div class="post-comment-button">
                <img src="icons/comment.svg" width="18" height="18">
                <span>Comment</span>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Post Post { get; set; }
    
    // protected override void OnInitialized()
    // {
    //     Console.WriteLine(Post.photo);
    // }

    async void OnClick(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            if (int.Parse(item.Value) == 1)
                try
                {
                    await _postService.DeletePost(Post.postId);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Post failed to be deleted! " + e);
                }
        }
        else
        {
            Console.WriteLine($"Clicked");
        }
    }
}