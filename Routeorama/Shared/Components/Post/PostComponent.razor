@using Routeorama.Models.Post
@using Routeorama.Data
@using Routeorama.Authentication
@using System.Text.RegularExpressions
@inject IPostService _postService;
@inject AuthenticationStateProvider _provider;
@inject NavigationManager _navigationManager;


<div class="post">
    <div class="post-upper">
        <div class="post-upper-profile">
            <div class="post-profile">
                <div class="post-owner">@Post.userId</div>
                <div class="post-date">@Post.dateOfCreation</div>
            </div>
            <div class="post-options">
                @if (Post.userId.Equals(((CustomAuthenticationStateProvider) _provider).GetUserId()))
                {
                    <RadzenSplitButton Click=@(OnClick) Icon="account_circle">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Delete Post" Value="1" Icon="delete_outline"/>
                        </ChildContent>
                    </RadzenSplitButton>
                }
                else if (!Post.userId.Equals(((CustomAuthenticationStateProvider) _provider).GetUserId()))
                {
                    <RadzenSplitButton Disabled="true" Click=@(args => OnClick(args)) Icon="account_circle">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Delete Post" Value="1" Icon="delete_outline"/>
                        </ChildContent>
                    </RadzenSplitButton>
                }
            </div>
        </div>
        <div class="post-description">
            <b>@Post.title</b>
            <br>
            <div class="post-description-inner">
                @foreach (var str in _description)
                {
                    if (str.Contains('#'))
                    {
                        <span>@str &nbsp;</span>
                    }
                    else
                    {
                        <div>@str &nbsp;</div>;
                    }
                }
            </div>
        </div>
    </div>
    <div class="post-middle">
        @if (Post.photo != null || Post.photo.Length != 0)
        {
            <div class="row">
                <img class="post-image" style="" src=@("data:" + Post.photoType + ";base64," + Convert.ToBase64String(Post.photo))>
            </div>
        }
    </div>
    <div class="post-bottom">
        <div class="post-likes">
            <div class="post-likes-inner">
                <span>@Post.likeCount</span> Likes
            </div>
            <div class="post-likes-inner">
                <span>12</span> Comments
            </div>
        </div>
        <div class="post-interactions">
            <div class="post-like-button" @onclick="Like" style="color: @_color">
                <img src="icons/@_likedIcon" width="18" height="18">
                <span>@_likeText</span>
            </div>
            <div class="post-comment-button">
                <img src="icons/comment.svg" width="18" height="18">
                <span>Comment</span>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Post Post { get; set; }

    private bool _likeState = false;
    private string _likedIcon = "like.svg";
    private string _likeText = "Like";
    private string _color = "white";
    private string[] _description = new []{""};

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _likeState = await _postService.GetLikeState(Post.postId, ((CustomAuthenticationStateProvider) _provider).GetUserId());
            Console.WriteLine(_likeState);
            SetLikeState();
            ParseTags(Post.content);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        SetLikeState();
    }

    private void ParseTags(string description)
    {
        // var regex = new Regex(@"#\w+");
        // var matches = regex.Matches(description);
        // foreach (var match in matches)
        // {
        //     description = description.Replace(match.ToString() ?? string.Empty, "<span>" + match + "</span>");
        // }
        // Console.WriteLine(description);
        // _description = description;

        var a = description.Split(' ');
        _description = a;
    }

    async void OnClick(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            if (int.Parse(item.Value) != 1) return;
            try
            {
                var deletePost = await _postService.DeletePost(Post.postId);
                if (deletePost)
                    _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
            }
            catch (Exception e)
            {
                Console.WriteLine("Post failed to be deleted! " + e);
            }
        }
        else
        {
            Console.WriteLine("Clicked");
        }
    }

    async void Like()
    {
        _likeState = !_likeState;
        await _postService.LikePost(((CustomAuthenticationStateProvider) _provider).GetUserId(), Post.postId, _likeState);
        SetLikeState();
    }

    void SetLikeState()
    {
        if (_likeState)
        {
            _likedIcon = "liked.svg";
            _color = "dodgerblue";
            _likeText = "Liked";
        }
        else
        {
            _likedIcon = "like.svg";
            _color = "white";
            _likeText = "Like";
        }
    }

}