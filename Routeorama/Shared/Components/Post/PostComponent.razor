@using Routeorama.Models.Post
@using Routeorama.Data
@using Routeorama.Authentication
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@inject IPostService _postService;
@inject AuthenticationStateProvider _provider;
@inject NavigationManager _navigationManager;

<div class="post">
    <div class="post-upper">
        <div class="post-upper-profile">
            <div class="post-profile">
                <div class="post-owner">@Post.Creator</div>
                <div class="post-date">@Post.dateOfCreation</div>
            </div>
            <div class="post-options">
                @if (Post.userId.Equals(((CustomAuthenticationStateProvider) _provider).GetUserId()))
                {
                    <RadzenSplitButton Click=@(OnClick) Icon="account_circle">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Delete Post" Value="1" Icon="delete_outline"/>
                        </ChildContent>
                    </RadzenSplitButton>
                }
                else if (!Post.userId.Equals(((CustomAuthenticationStateProvider) _provider).GetUserId()))
                {
                    <RadzenSplitButton Disabled="true" Click=@(args => OnClick(args)) Icon="account_circle">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Delete Post" Value="1" Icon="delete_outline"/>
                        </ChildContent>
                    </RadzenSplitButton>
                }
            </div>
        </div>
        <div class="post-description">
            <b>@Post.title</b>
            <br>
            <div class="post-description-inner">
                @foreach (var str in _description)
                {
                    if (str.Contains('#'))
                    {
                        <span class="post-tag">@str&nbsp;</span>
                    }
                    else
                    {
                        <span>@str&nbsp;</span>
                    }
                }
            </div>
        </div>
    </div>
    <div class="post-middle">
        @if (Post.photo != null && Post.photo.Length != 0)
        {
            <img alt="image" class="post-image" style="" src=@("data:" + Post.photoType + ";base64," + Convert.ToBase64String(Post.photo))>
        }
    </div>
    <div class="post-bottom">
        <div class="post-likes">
            <div class="post-likes-inner">
                <span>@Post.likeCount</span> Likes
            </div>
            <div class="post-likes-inner">
                <span>@_commentCount</span> Comments
            </div>
        </div>
        <div class="post-interactions">
            <div class="post-like-button" @onclick="Like" style="color: @_color">
                <img src="icons/@_likedIcon" width="18" height="18">
                <span>@_likeText</span>
            </div>
            <div class="post-comment-button" @onclick="ShowCommentComponent">
                <img src="icons/comment.svg" width="18" height="18">
                <span>Comment</span>
            </div>
        </div>
    </div>

    <div class="comment-section">
        @if (_commentComponent)
        {
            <div class="comment-action">
                <input class="comment-input" placeholder="Share your thoughts" type="text" @onchange="OnComment">
                <button class="comment-button" @onclick="Comment">Comment</button>
                <div style="color: red">@_errorLabel</div>
            </div>
            if (_filteredComments.Count > 0)
            {
                foreach (var comment in _filteredComments)
                {
                    if (comment.userId.Equals(((CustomAuthenticationStateProvider) _provider).GetUserId()))
                    {
                        <div class="comment-container" style="color:#3a3b3c;">
                            <div class="comment-content">
                                <div class="comment-top">
                                    <div class="comment-owner">
                                        @comment.displayName
                                    </div>
                                    <div class="comment-time">
                                        @comment.timestamp.Substring(0, 9)
                                        @comment.timestamp.Substring(11, 5)
                                    </div>
                                </div>
                                <div class="comment-bottom">
                                    <div>@comment.content</div>
                                </div>
                            </div>
                            <div class="comment-delete" @onclick="@(() => DeleteComment(comment))">
                                <img alt="close" src="icons/close.svg">
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="comment-container" style="color:#3a3b3c;">
                            <div class="comment-content">
                                <div class="comment-top">
                                    <div class="comment-owner">
                                        @comment.displayName
                                    </div>
                                    <div class="comment-time">
                                        @comment.timestamp.Substring(0, 9)
                                        @comment.timestamp.Substring(11, 5)
                                    </div>
                                </div>
                                <div class="comment-bottom">
                                    <div>@comment.content</div>
                                </div>
                            </div>
                        </div>
                    }
                }
                if (!_commentContainer.Equals(null) && _hasMoreComments)
                {
                    <div class="load-comments" @onclick="LoadMoreComments" >Load more comments</div>
                }
            }
        }
    </div>
</div>


@code
{
    [Parameter]
    public Post Post { get; set; }

    private bool _likeState = false;
    private string _likedIcon = "like.svg";
    private string _likeText = "Like";
    private string _color = "#65676b";
    private string[] _description = new[] {""};
    private int _commentCount;

    private bool _commentComponent;
    private string _commentContent;

    private IList<Comment> _fetchedComments = new List<Comment>();
    private IList<Comment> _filteredComments = new List<Comment>();

    private CommentContainer _commentContainer;

    private bool _hasMoreComments;
    private string _errorLabel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _likeState = await _postService.GetLikeState(Post.postId, ((CustomAuthenticationStateProvider) _provider).GetUserId());
            _commentCount = await _postService.GetCommentCount(Post.postId);
            SetLikeState();
            ParseTags(Post.content);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        SetLikeState();
    }

    private void ParseTags(string description)
    {
        var a = description.Split(' ');
        _description = a;
    }

    async void OnClick(RadzenSplitButtonItem item)
    {
        if (item == null) return;
        if (int.Parse(item.Value) != 1) return;
        try
        {
            var deletePost = await _postService.DeletePost(Post.postId);
            if (deletePost)
                _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine("Post failed to be deleted! " + e);
        }
    }

    async void Like()
    {
        _likeState = !_likeState;
        SetLikeState();
        await _postService.LikePost(Post.postId, ((CustomAuthenticationStateProvider) _provider).GetUserId(), _likeState);
        StateHasChanged();
    }

    void SetLikeState()
    {
        if (_likeState)
        {
            _likedIcon = "liked.svg";
            _color = "#e57621";
            _likeText = "Liked";
        }
        else
        {
            _likedIcon = "like.svg";
            _color = "#65676b";
            _likeText = "Like";
        }
    }

    private async Task ShowCommentComponent()
    {
        if (_commentComponent)
        {
            _commentComponent = false;
        }
        else
        {
            _commentContainer = await _postService.GetCommentsForPost(Post.postId);
            if (!_commentContainer.Equals(null))
            {
                _fetchedComments = _commentContainer.comments;
                _hasMoreComments = _commentContainer.hasMoreComments;
                Filter();
            }

            _commentComponent = true;
        }
    }

    private void Filter()
    {
        _filteredComments = _fetchedComments;
    }

    private async void Comment()
    {
        Console.WriteLine(_commentContent);
        if (_commentContent.Length == 0)
        {
            _errorLabel = "Comment too short.";
        }
        else
        {
            var newComment = new Comment
            {
                userId = ((CustomAuthenticationStateProvider) _provider).GetUserId(),
                displayName = ((CustomAuthenticationStateProvider) _provider).GetDisplayName(),
                postId = Post.postId,
                content = _commentContent,
                timestamp = null
            };
            await _postService.Comment(newComment);

            _commentContainer = await _postService.GetCommentsForPost(Post.postId);
            if (!_commentContainer.Equals(null))
            {
                _fetchedComments = _commentContainer.comments;
                _hasMoreComments = _commentContainer.hasMoreComments;
                Filter();
            }
            StateHasChanged();
            _commentContent = "";
        }
    }


    private async void DeleteComment(Comment comment)
    {
        await _postService.DeleteComment(comment);
        _commentContainer = await _postService.GetCommentsForPost(Post.postId);
        if (!_commentContainer.Equals(null))
        {
            _fetchedComments = _commentContainer.comments;
            _hasMoreComments = _commentContainer.hasMoreComments;
            Filter();
        }
        StateHasChanged();
    }

    private void OnChange(string args)
    {
        _commentContent = args;
        args = "";
    }

    private async void LoadMoreComments()
    {
        CommentContainer container = null;
        if (_filteredComments == null)
        {
            container = await _postService.LoadMoreComments(Post.postId, null);
        }
        else
        {
            container = await _postService.LoadMoreComments(Post.postId, _filteredComments.Last());
        }
        if (container.comments == null) return;
        foreach (var comment in container.comments)
        {
            _filteredComments?.Add(comment);
        }
        _hasMoreComments = container.hasMoreComments;
        StateHasChanged();
    }

    private void OnComment(ChangeEventArgs obj)
    {
        _commentContent = obj.Value.ToString();
        obj.Value = "";
    }
}