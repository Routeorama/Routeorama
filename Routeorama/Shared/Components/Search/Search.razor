@using Routeorama.Data
@inject IPlaceService _placeService;
@inject NavigationManager _navigationManager;

@namespace Routeorama.Shared.Components.Search

<RadzenAutoComplete Style="background-color: transparent; padding-top: 5px;" Placeholder="Search..." Data=@_places TextProperty="name" LoadData=@OnLoadData Change=@(OnChange)/>
                                                                                                                                   
@code {

    private IList<Place> _places = new List<Place>();
    
    private IList<Place> _filteredPlaces = new List<Place>();

    void OnChange(object value)
    {
        foreach (var place in _places)
        {
            if(place.name.Equals(value.ToString()))
            {
                _navigationManager.NavigateTo($"/channel/{value}", forceLoad:true);
            }
        }
    }

    async void OnLoadData(LoadDataArgs args)
    {
        if (args.Filter is not (null or ""))
        {
            _places = await _placeService.SearchForPlaces(args.Filter);
        }

        if (_places.Count == 0) return;
        _filteredPlaces = _places.Where(c => c.name.Contains(args.Filter) || c.name.Contains(args.Filter)).ToList();

        await InvokeAsync(StateHasChanged);
    }
}